# 2024-4-10  15:15-构建MySQL、Redis、ElasticSearch、Kibana容器
version: "3.9"
services:


  ## 2024-10-9  22:44-远程部署该容器实例时 , 请先对 ./volumes/mysql/usr/local/bin/docker-entrypoint.sh。。 文件做个无副作用的写操作(比如 , 你可以对空行处做个回车等操作使该文件变成被修改过的文件即可) , 否则部署容器实例将失败
  # 2024-5-28  17:42-启动MySQL容器失败请参照下面的方案进行修改：修改docker-entrypoint.sh和init.sh脚本文件的#!/bin/bash部分，重新写一遍
  #  我的头发与此非常相似。在我的情况下 /bin/bash 确实存在。但实际上问题是 Windows 行尾。
  #
  #  在我的例子中，git 存储库有一个带有 Unix 行尾 (\n) 的入口点脚本。但是当在 Windows 机器上签出存储库时，git 决定尝试并聪明地将文件中的行结尾替换为 Windows 行结尾 (\r\n)。
  #
  #  这意味着 shebang 不起作用，因为它不是在寻找 /bin/bash ，而是在寻找 /bin/bash\r 。
  #
  #  我的解决方案是禁用 git 的自动转换：
  #
  #  git config --global core.autocrlf input
  #
  #  然后再次检查存储库并重建。
  # 解决方案链接：https://segmentfault.com/q/1010000042803305
  # 2024-4-10  16:16-创建MySQL容器
  mysql:
    container_name: ptp-backend-mysql-1
    labels:
      name: ptp-backend-mysql-1
      author: LiGuanda
      description: "PTP的后台MySQL数据库集群的ID为1的数据库"
    # build: .
    image: mysql:${MYSQL_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-mysql-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${MYSQL_LOCALHOST}
    ports:
      - "4407:3306"
    expose:
      - 3306
    volumes:
      # - ./volumes/mysql/usr/local/bin/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh:rw
      - ./volumes/mysql/etc/mysql/conf.d:/etc/mysql/conf.d:r
      - ./volumes/mysql/var/log:/var/log:rw
      # - ./volumes/mysql/var/lib/mysql:/var/lib/mysql:rw
      # - ./volumes/mysql/run/mysqld:/run/mysqld:rw
      - ./volumes/mysql/etc/my.cnf:/etc/my.cnf:r
      - ./volumes/mysql/sql/:/docker-entrypoint-initdb.d/:rw # 2024-10-10  1:29-此目录存放默认执行的SQL脚本文件 , 这些脚本仅在镜像容器第一次启动时被执行 , 后续不再执行(参考自https://www.cnblogs.com/gradyblog/p/16057694.html)
      # - ./volumes/mysql/script:/docker-entrypoint-initdb.d/:r
    environment:
      MYSQL_ROOT_PASSWORD: root
      TZ: Asia/Shanghai
      SET_CONTAINER_TIMEZONE: true
      CONTAINER_TIMEZONE: Asia/Shanghai
    restart: on-failure
    # command: mysql -uroot -proot
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    # pid: host
    # privileged: true


  # 2024-11-8  21:17-该Redis的密码配置见 /docker/volumes/redis/config/redis.conf 中的 requirepass 配置 , 默认没有配置用户名
  # 2024-10-9  22:12-远程部署该容器实例时 , 请先清空 ./volumes/redis/data 目录和 ./volumes/redis/root 目录中的数据 , 否则会部署失败
  # 2024-4-10  16:46-创建Redis数据库
  redis:
    container_name: ptp-backend-redis-1
    labels:
      name: ptp-backend-redis-1
      author: LiGuanda
      description: "PTP的后台Redis数据库集群的ID为1的高速缓存数据库"
      # build:
      # context: .
      # dockerfile: ./redis/Dockerfile
    image: redis:${REDIS_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-redis-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${REDIS_LOCALHOST}
    ports:
      - "7001:6379"
    expose:
      - 6379
    # environment:
    #   TZ: Asia/Shanghai
    #   LANG: en_US.UTF-8
    volumes:
      - ./volumes/redis/data:/data:rw
      - ./volumes/redis/root:/root:rw
      - ./volumes/redis/config/redis.conf:/etc/redis/redis.conf:rw
    restart: on-failure
    command: redis-server /etc/redis/redis.conf # 2024-5-4  22:03-用户名:无 用户密码:root
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    # pid: host
    # privileged: true
    # command:
    # - sh -c redis-server && sleep 5 && redis-cli config set requirepass root && sh -c redis-cli quit


  # 2024-4-12  21:28-运行时需要手动添加.env为环境配置文件，或者执行docker-compose config指令生成最终docker-compose构建文件
  # 2024-4-10  19:44-安装ElasticSearch容器
  elasticsearch:
    container_name: ptp-backend-es-1
    labels:
      name: ptp-backend-es-1
      author: LiGuanda
      description: "PTP的后台ElasticSearch数据库集群的ID为1的分词搜索数据库"
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-es-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
      - kibanahost:${KIBANA_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${ELASTICSEARCH_LOCALHOST}
    ports:
      - "9200:9200"
      - "9300:9300"
    expose:
      - 9200
      - 9300
    volumes:
      - ./volumes/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:rw
      - ./volumes/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:rw
      - ./volumes/elasticsearch/plugins:/usr/share/elasticsearch/plugins:rw
    environment:
      discovery.type: single-node
    restart: on-failure
    # command: "cd /usr/share/elasticsearch/bin && elasticsearch-reset-password -u elastic -i --url=https://localhost:9200"
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    working_dir: /usr/share/elasticsearch
    # pid: host
    # privileged: true
    external_links:
      - kibana:ptp-backend-kibana-1



  # 2024-4-10  20:36-安装Kibana
  kibana:
    container_name: ptp-backend-kibana-1
    labels:
      name: ptp-backend-kibana-1
      author: LiGuanda
      description: "用于对ElasticSearch数据库中的数据进行可视化展现"
    image: kibana:${KIBANA_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-kibana-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
      - eshost:${ELASTICSEARCH_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${KIBANA_LOCALHOST}
    ports:
      - "5601:5601"
    expose:
      - 5601
      # volumes:
      # - ./volumes/kibana/config:/usr/share/kibana/config:rw
    environment:
      ELASTICSEARCH_HOSTS: http://${EXTERNAL_LOCALHOST}:9200
      TZ: Asia/Shanghai
      I18N_LOCALE: zh-CN
      SERVER_HOST: ${KIBANA_LOCALHOST}
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - elasticsearch
    # pid: host
    # privileged: true
    external_links:
      - elasticsearch:ptp-backend-elasticsearch-1

  # 2024-4-20  10:39-安装minio
  minio:
    container_name: ptp-backend-minio-1
    labels:
      name: ptp-backend-minio-1
      author: LiGuanda
      description: "用于对用户提交上云的媒体数据提供对象存储服务(OSS)"
    image: minio/minio:${MINIO_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-minio-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${MINIO_LOCALHOST}
    ports:
      - "9000:9000"
      - "9001:9001"
    expose:
      - 9000
      - 9001
    volumes:
      - ./volumes/minio/config/:/etc/minio/:rw
      - ./volumes/minio/data:/data:rw
    environment:
      MINIO_CONFIG_ENV_FILE: /etc/minio/config.env
      MINIO_ACCESS_KEY: ptp_minio_access_key
      MINIO_SECRET_KEY: ptp_minio_secret_key
    command: minio server --console-address ":9001"
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64

  # 2024-4-26  20:45-安装kes
  #  kes:
  #    container_name: ptp-backend-kes-1
  #    labels:
  #      name: ptp-backend-kes-1
  #      author: LiGuanda
  #      description: "用于对用户提交上云的媒体数据提供安全服务保证"
  #    image: minio/kes:${KES_VERSION}
  #    env_file:
  #      - .env
  #    dns: 8.8.8.8
  #    hostname: ptp-backend-kes-1
  #    extra_hosts:
  #      - exthost:${EXTERNAL_LOCALHOST}
  #    networks:
  #      ptp-network:
  #        ipv4_address: ${KES_LOCALHOST}
  #    ports:
  #      - "7373:7373"
  #    expose:
  #      - 7373
  #      # environment:
  #      # KES_SERVER: http://${KES_LOCALHOST}:7373
  #      # KES_API_KEY: kes:v1:AD9E7FSYWrMD+VjhI6q545cYT9YOyFxZb7UnjEepYDRc
  #    restart: on-failure
  #    logging:
  #      driver: json-file
  #      options:
  #        max-size: 256k
  #        max-file: 64

  # 2024-4-27  18:32-安装nacos
  nacos:
    container_name: ptp-backend-nacos-1
    labels:
      name: ptp-backend-nacos-1
      author: LiGuanda
      description: "用于对服务提供者和服务消费者提供服务发现和动态配置功能"
    image: nacos/nacos-server:${NACOS_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-nacos-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${NACOS_LOCALHOST}
    ports:
      - "7848:7848"
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
    expose:
      - 7848 # 2024-10-9  14:33-集群间数据同步端口
      - 8848 # 2024-10-9  14:15-主端口、客户端、控制台及OpenAPI所使用的HTTP端口
      - 9848 # 2024-10-9  14:15-客户端gRPC请求服务端端口 , 用于客户端向服务端发起连接和请求
      - 9849 # 2024-10-9  14:19-服务端gRPC请求服务端端口 , 用于服务间同步等
    volumes:
      - "./volumes/nacos/standalone-logs/:/home/nacos/logs:rw"
    environment:
      PREFER_HOST_MODE: hostname # 2024-4-27  18:41-支持IP还是域名模式
      MODE: standalone # 2024-4-27  18:42-系统启动方式: 集群/单机
      NACOS_AUTH_IDENTITY_KEY: ptp-backend-nacos-auth-key
      NACOS_AUTH_IDENTITY_VALUE: ptp-backend-nacos-auth-value
      NACOS_AUTH_TOKEN: ptp-backend-nacos-auth-token
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64


  # 2024-5-29  20:38-安装RocketMQ-NameServer
  rocketmq-nameserver:
    container_name: ptp-backend-rocketmq-nameserver-1
    labels:
      name: ptp-backend-rocketmq-nameserver-1
      author: LiGuanda
      description: "用于给RocketMQ的Broker提供服务发现与注册功能"
    image: apache/rocketmq:${ROCKETMQ_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-rocketmq-nameserver-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${ROCKETMQ_NAMESERVER_LOCALHOST}
    ports:
      - "9876:9876"
    expose:
      - 9876
    volumes:
      - "./volumes/rocketmq/logs:/home/rocketmq/logs:rw"
      - "./volumes/rocketmq/conf/broker.conf:/home/rocketmq/rocketmq-5.2.0/conf/broker.conf:rw"
    command: sh mqnamesrv
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64


  # 2024-5-29  21:43-安装RocketMQ-Broker
  rocketmq-broker:
    container_name: ptp-backend-rocketmq-broker-1
    labels:
      name: ptp-backend-rocketmq-broker-1
      author: LiGuanda
      description: "用于真正提供消息收发功能"
    image: apache/rocketmq:${ROCKETMQ_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-rocketmq-broker-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${ROCKETMQ_BROKER_LOCALHOST}
    ports:
      - "10909:10909"
      - "10911:10911"
    expose:
      - 10909
      - 10911
    volumes:
      - "./volumes/rocketmq/logs:/home/rocketmq/logs:rw"
      - "./volumes/rocketmq/conf/broker.conf:/home/rocketmq/rocketmq-5.2.0/conf/broker.conf:rw"
    command: sh mqbroker -n ${EXTERNAL_LOCALHOST}:9876 -c /home/rocketmq/rocketmq-5.2.0/conf/broker.conf
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - rocketmq-nameserver


  # 2024-5-29  21:43-安装RocketMQ-Dashboard
  rocketmq-dashboard:
    container_name: ptp-backend-rocketmq-dashboard-1
    labels:
      name: ptp-backend-rocketmq-dashboard-1
      author: LiGuanda
      description: "用于监控RocketMQ的各种事件、性能的统计信息"
    image: apacherocketmq/rocketmq-dashboard:${ROCKETMQ_DASHBOARD_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-rocketmq-dashboard-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${ROCKETMQ_DASHBOARD_LOCALHOST}
    ports:
      - "8280:8080"
    expose:
      - 8080
    environment:
      JAVA_OPTS: "-Drocketmq.namesrv.addr=${EXTERNAL_LOCALHOST}:9876"
    command: sh rocketmq-dashboard
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - rocketmq-nameserver
      - rocketmq-broker


  # 2024-6-20  20:09-当你发现Docker容器总是在运行一段时间后就莫名其妙地失联或者出现其他意外的业务异常，此时，我们建议您停止logstash容器的运行
  # 2024-6-13  23:50-安装logstash
  logstash:
    container_name: ptp-backend-logstash-1
    labels:
      name: ptp-backend-logstash-1
      author: LiGuanda
      description: "用于从多个数据源采集数据然后转换数据并发送至数据库中"
    image: logstash:${LOGSTASH_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-logstash-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${LOGSTASH_LOCALHOST}
    ports:
      - "5043:5043"
      - "5044:5044"
      - "9600:9600"
    expose:
      - 5043
      - 5044
      - 9600
    volumes:
      - "./volumes/logstash/config:/usr/share/logstash/config:rw"
      - "./volumes/logstash/pipeline:/usr/share/logstash/pipeline:rw"
      - "./volumes/logstash/docker-entrypoint:/usr/local/bin/docker-entrypoint:rw"
    # 2024-6-14  23:42-安装json_lines所需的插件
    # command: /usr/share/logstash/bin/logstash-plugin install logstash-codec-json_lines && /bin/bash
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64


  # 2024-6-21  15:51-如果在执行本配置的xxl-job-admin镜像下载过程中总是出错，建议先单独通过docker拉取镜像，然后再执行本docker-compose配置
  # 2024-6-20  15:12-部署成功后可进入 http://localhost:8380/xxl-job-admin 到控制台界面(默认账号为ptpjob，默认密码为5201314)
  # 2024-6-20  10:56-安装XXL-Job-Admin管理界面
  xxl-job-admin:
    container_name: ptp-backend-xxl-job-admin-1
    labels:
      name: ptp-backend-xxl-job-admin-1
      author: LiGuanda
      description: "用于监控和管理XXL-Job执行情况的Admin中台"
    image: xuxueli/xxl-job-admin:${XXL_JOB_ADMIN_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-xxl-job-admin-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
      - mysqlhost:${MYSQL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${XXL_JOB_ADMIN_LOCALHOST}
    ports:
      - "8380:8080"
    expose:
      - 8080
    volumes:
      - "./volumes/xxl_job_admin/logs:/data/applogs:rw"
    environment:
      PARAMS: "--spring.datasource.url=jdbc:mysql://exthost:4407/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai  --spring.datasource.username=ptp_backend  --spring.datasource.password=7758521  --xxl.job.accessToken=5201314"
      JAVA_OPTS: "-Xmx512m"
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - mysql


  # 2024-6-25  21:25-安装skywalking的OAP服务器
  skywalking-oap:
    container_name: ptp-backend-skywalking-oap-1
    labels:
      name: ptp-backend-skywalking-oap-1
      author: LiGuanda
      description: "skywalking的OAP服务器端"
    image: apache/skywalking-oap-server:${SKYWALKING_OAP_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-skywalking-oap-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${SKYWALKING_OAP_LOCALHOST}
    ports:
      - "11800:11800"
      - "12800:12800"
    expose:
      - 11800
      - 12800
    volumes:
      - "./volumes/skywalking/oap/config:/skywalking/config:rw" # 2024-6-25  22:05-如果您打算覆盖或添加 /skywalking/config 配置文件， /skywalking/ext-config 则 是放置额外文件的位置。同名文件将被覆盖;否则，它们将被添加到 /skywalking/config
      - "./volumes/skywalking/oap/ext-config:/skywalking/ext-config:rw"
      - "./volumes/skywalking/oap/ext-libs:/skywalking/ext-libs:rw" # 2024-6-25  22:06-如果要在 OAP 的类路径中添加更多 libs/jar，例如，OAL 的新指标。这些 jar 可以挂载到 /skywalking/ext-libs ，然后 entrypoint bash 会将它们附加到类路径中。请注意，您不能覆盖类路径中的现有 jar
    environment:
      SW_STORAGE: elasticsearch # 指定存储方式
      SW_STORAGE_ES_CLUSTER_NODES: exthost:9200 # 指定存储的地址
      SW_HEALTH_CHECKER: default
      SW_TELEMETRY: prometheus
      TZ: Asia/Shanghai
      # 监控检查
      # healthcheck:
      # test: [ "CMD-SHELL", "/skywalking/bin/swctl ch" ]
      # 每间隔30秒执行一次
      # interval: 30s
      # 健康检查命令运行超时时间，如果超过这个时间，本次健康检查就被视为失败；
      # timeout: 10s
      # 当连续失败指定次数后，则将容器状态视为 unhealthy，默认 3 次。
      # retries: 3
      # 应用的启动的初始化时间，在启动过程中的健康检查失效不会计入，默认 0 秒。
      start_period: 10s
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - elasticsearch


  # 2024-6-25  21:38-安装skywalking的管理控制台
  skywalking-ui:
    container_name: ptp-backend-skywalking-ui-1
    labels:
      name: ptp-backend-skywalking-ui-1
      author: LiGuanda
      description: "skywalking的后端管理控制台"
    image: apache/skywalking-ui:${SKYWALKING_UI_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-skywalking-ui-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${SKYWALKING_UI_LOCALHOST}
    ports:
      - "8480:8080"
    expose:
      - 8080
    environment:
      SW_OAP_ADDRESS: http://exthost:12800
      TZ: Asia/Shanghai
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - skywalking-oap
      # condition: service_healthy


  # 2024-6-27  22:24-部署并成功运行后 , 可键入 http://http://127.0.0.1:7091 进入到seata控制台界面 , 默认的用户名和密码均为seata(可在resources目录下的application.yml中进行配置)
  # 2024-6-27  21:43-安装seata服务端
  seata-server:
    container_name: ptp-backend-seata-server-1
    labels:
      name: ptp-backend-seata-server-1
      author: LiGuanda
      description: "seata的服务端"
    image: apache/seata-server:${SEATA_SERVER_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-seata-server-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${SEATA_SERVER_LOCALHOST}
    ports:
      - "7091:7091"
      - "8091:8091"
    expose:
      - 7091
      - 8091
    volumes:
      - "./volumes/seata/resources:/seata-server/resources:rw"
      - "./volumes/seata/sessionStore:/seata-server/sessionStore:rw"
      - "./volumes/seata/libs/mysql-connector-j-8.2.0.jar:/seata-server/libs/mysql-connector-j-8.2.0.jar:rw"
      # - "./volumes/seata/lib/jdbc:/lib/jdbc:rw"
    environment:
      SEATA_IP: exthost # 2024-6-28  21:38-指定seata-server启动的IP , 该IP用于向注册中心注册时使用 , 解决seata客户端从nacos拉取到的seata服务端地址为无法通信的docker容器的地址
      SEATA_PORT: 8091 # 2024-6-28  21:40-指定seata-server启动的端口 , 默认为 8091
      # STORE_MODE: db # 2024-6-27  21:49-指定seata-server的事务日志存储方式 , 支持db , file , redis(Seata-Server 1.3及以上版本支持) , 默认是 file
      TZ: Asia/Shanghai # 2024-6-27  21:48-避免docker显示的date时间不正确
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - mysql


  # 2024-10-9  22:42-远程部署该容器实例时 , 请先对 ./volumes/mongodb/docker-entrypoint.sh 文件做个无副作用的写操作(比如 , 你可以对空行处做个回车等操作使该文件变成被修改过的文件即可) , 否则部署容器实例将失败
  # 2024-9-8  22:22-每次重新构建该容器时 , 记得清除该容器对应的映射目录中的data目录以正常执行初始化docker-entrypoint-initdb.d目录下的JS/Shell脚本
  # 2024-9-7  21:51-安装MongoDB数据库
  mongodb:
    container_name: ptp-backend-mongodb-1
    labels:
      name: ptp-backend-mongodb-1
      author: LiGuanda
      description: "主要用于存储聊天室群聊消息的MongoDB数据库"
    image: mongo:${MONGODB_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-mongodb-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${MONGODB_LOCALHOST}
    ports:
      - "27017:27017"
    expose:
      - 27017
    volumes:
      - "./volumes/mongodb/data:/data/db:rw"
      - "./volumes/mongodb/config:/etc/mongo:rw"
      - "./volumes/mongodb/logs:/var/log/mongodb:rw"
      - "./volumes/mongodb/script/:/docker-entrypoint-initdb.d/:rw"
      - "./volumes/mongodb/docker-entrypoint.sh:/usr/local/bin/docker-entrypoint.sh:rw"
    environment:
      # 2024-9-7  21:55-初始化一个 root 角色的用户 root 密码是 ptp-backend-mongodb-pwd
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ptp-backend-mongodb-pwd
      # ME_CONFIG_MONGODB_URL: mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@docker_mongo:27017/
      MONGO_INITDB_DATABASE: ptp_web # 2024-9-8  18:42- docker-entrypoint-initdb.d目录下的JS、Shell文件将在该数据库下的上下文环境中被执行
    command:
      # 2024-9-9  20:41-开启该参数后 , 容器首次启动的时间将会延迟一小会~
      - "--auth" # 2024-9-7  22:03-表示连接mongodb需要用户名和密码
      - "--config"
      - "/etc/mongo/mongod.conf" # 2024-9-7  22:15-mongod默认情况下不读取配置文件，因此需要指定带有配置文件路径的 --config 选项
      - "--wiredTigerCacheSizeGB"
      - "1.5" # 2024-9-7  22:17-设置缓存大小配置为1.5GB
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64


  # 2024-10-10  1:30-远程部署该容器实例时 , 请先对 ./volumes/scripts/start_spring_cloud_services.sh 文件做个无副作用的写操作(比如 , 你可以对空行处做个回车等操作使该文件变成被修改过的文件即可) , 否则部署容器实例将失败
  # 2024-10-10  1:12-远程部署该容器实例时 , 请先生成各个微服务程序的jar包到 ./jars 目录(没有该目录则请自行创建一个 , 目录名称必须为jars , 然后生成的jar包的名字也不要随意改动 , 保持原样即可)中
  # 同时 , 在生成jar包之前 , 你需要自行前往项目根POM文件中修改最终的jar包输出目录所在的绝对路径 , 另外 , 最终通过maven打包时请跳过测试, 否则部署容器实例将失败
  # 2024-10-8-安装PTP后台管理微服务
  spring-cloud-services:
    container_name: ptp-backend-spring-cloud-services-1
    labels:
      name: ptp-backend-spring-cloud-services-1
      author: LiGuanda
      description: "PTP的后端管理Spring Cloud微服务"
    build: # 2024-10-8  18:43-使用本文件所在目录中的Dockerfile构建生成的镜像
      context: .
      dockerfile: ./Dockerfile
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-spring-cloud-services-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${PTP_SPRING_CLOUD_LOCALHOST}
    ports:
      - "8080:8080"
      - "8090:8090"
      - "8120:8120"
      - "8150:8150"
      - "8180:8180"
      - "8210:8210"
      # - "9848:9848" # 2024-10-9  00:56-解决Docker运行微服务实例时nacos报  Server check fail, please check server 127.0.0.1 ,port 9848 is available 的错误
    expose:
      - 8080
      - 8090
      - 8120
      - 8150
      - 8180
      - 8210
      # - 9848
    environment:
      REAL_MACHINE_IP: "192.168.1.10" # 2024-10-9  18:00-请务必将此值修改为容器实例所在宿主机的真实的物理IP , 后续你就无需再挨个去每个微服务模块的配置文件单独修改了
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - mysql
      - redis
      - mongodb
      - nacos
      # - elasticsearch
      # - logstash
      # - minio
      # - rocketmq-broker
      # - rocketmq-nameserver
      # - seata-server
      # - skywalking-oap
      # - xxl-job-admin
      # condition: service_healthy


# 2024-4-10  15:28-新建一个自定义网络，将全部容器部署到同一个网络内，使其之间能够相互连通
networks:
  ptp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.250.250.0/24