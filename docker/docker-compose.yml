# 2024-4-10  15:15-构建MySQL、Redis、ElasticSearch、Kibana容器
version: "3.9"
services:


  # 2024-5-28  17:42-启动MySQL容器失败请参照下面的方案进行修改：修改docker-entrypoint.sh和init.sh脚本文件的#!/bin/bash部分，重新写一遍
  #  我的头发与此非常相似。在我的情况下 /bin/bash 确实存在。但实际上问题是 Windows 行尾。
  #
  #  在我的例子中，git 存储库有一个带有 Unix 行尾 (\n) 的入口点脚本。但是当在 Windows 机器上签出存储库时，git 决定尝试并聪明地将文件中的行结尾替换为 Windows 行结尾 (\r\n)。
  #
  #  这意味着 shebang 不起作用，因为它不是在寻找 /bin/bash ，而是在寻找 /bin/bash\r 。
  #
  #  我的解决方案是禁用 git 的自动转换：
  #
  #  git config --global core.autocrlf input
  #
  #  然后再次检查存储库并重建。
  # 解决方案链接：https://segmentfault.com/q/1010000042803305
  # 2024-4-10  16:16-创建MySQL容器
  mysql:
    container_name: ptp-backend-mysql-1
    labels:
      name: ptp-backend-mysql-1
      author: LiGuanda
      description: "PTP的后台MySQL数据库集群的ID为1的数据库"
    # build: .
    image: mysql:${MYSQL_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-mysql-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${MYSQL_LOCALHOST}
    ports:
      - "4407:3306"
    expose:
      - 3306
    volumes:
      - ./volumes/mysql/usr/local/bin/:/usr/local/bin/:r
      - ./volumes/mysql/etc/mysql/conf.d:/etc/mysql/conf.d:r
      - ./volumes/mysql/var/log:/var/log:rw
      # - ./volumes/mysql/var/lib/mysql:/var/lib/mysql:rw
      # - ./volumes/mysql/run/mysqld:/run/mysqld:rw
      - ./volumes/mysql/etc/my.cnf:/etc/my.cnf:r
      - ./volumes/mysql/sql:/docker-entrypoint-initdb.d/sql/:rw
      - ./volumes/mysql/script:/docker-entrypoint-initdb.d/:r
    environment:
      MYSQL_ROOT_PASSWORD: root
      TZ: Asia/Shanghai
      SET_CONTAINER_TIMEZONE: true
      CONTAINER_TIMEZONE: Asia/Shanghai
    restart: on-failure
    # command: mysql -uroot -proot
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    # pid: host
    # privileged: true


  # 2024-4-10  16:46-创建Redis数据库
  redis:
    container_name: ptp-backend-redis-1
    labels:
      name: ptp-backend-redis-1
      author: LiGuanda
      description: "PTP的后台Redis数据库集群的ID为1的高速缓存数据库"
      # build:
      # context: .
      # dockerfile: ./redis/Dockerfile
    image: redis:${REDIS_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-redis-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${REDIS_LOCALHOST}
    ports:
      - "7001:6379"
    expose:
      - 6379
    # environment:
    #   TZ: Asia/Shanghai
    #   LANG: en_US.UTF-8
    volumes:
      - ./volumes/redis/data:/data:rw
      - ./volumes/redis/root:/root:rw
      - ./volumes/redis/config/redis.conf:/etc/redis/redis.conf:rw
    restart: on-failure
    command: redis-server /etc/redis/redis.conf # 2024-5-4  22:03-用户名:无 用户密码:root
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    # pid: host
    # privileged: true
    # command:
    # - sh -c redis-server && sleep 5 && redis-cli config set requirepass root && sh -c redis-cli quit


  # 2024-4-12  21:28-运行时需要手动添加.env为环境配置文件，或者执行docker-compose config指令生成最终docker-compose构建文件
  # 2024-4-10  19:44-安装ElasticSearch容器
  elasticsearch:
    container_name: ptp-backend-es-1
    labels:
      name: ptp-backend-es-1
      author: LiGuanda
      description: "PTP的后台ElasticSearch数据库集群的ID为1的分词搜索数据库"
    image: elasticsearch:${ELASTICSEARCH_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-es-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
      - kibanahost:${KIBANA_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${ELASTICSEARCH_LOCALHOST}
    ports:
      - "9200:9200"
      - "9300:9300"
    expose:
      - 9200
      - 9300
    volumes:
      - ./volumes/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:rw
      - ./volumes/elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:rw
      - ./volumes/elasticsearch/plugins:/usr/share/elasticsearch/plugins:rw
    environment:
      discovery.type: single-node
    restart: on-failure
    # command: "cd /usr/share/elasticsearch/bin && elasticsearch-reset-password -u elastic -i --url=https://localhost:9200"
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    working_dir: /usr/share/elasticsearch
    # pid: host
    # privileged: true
    external_links:
      - kibana:ptp-backend-kibana-1



  # 2024-4-10  20:36-安装Kibana
  kibana:
    container_name: ptp-backend-kibana-1
    labels:
      name: ptp-backend-kibana-1
      author: LiGuanda
      description: "用于对ElasticSearch数据库中的数据进行可视化展现"
    image: kibana:${KIBANA_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-kibana-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
      - eshost:${ELASTICSEARCH_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${KIBANA_LOCALHOST}
    ports:
      - "5601:5601"
    expose:
      - 5601
      # volumes:
      # - ./volumes/kibana/config:/usr/share/kibana/config:rw
    environment:
      ELASTICSEARCH_HOSTS: http://${EXTERNAL_LOCALHOST}:9200
      TZ: Asia/Shanghai
      I18N_LOCALE: zh-CN
      SERVER_HOST: ${KIBANA_LOCALHOST}
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - elasticsearch
    # pid: host
    # privileged: true
    external_links:
      - elasticsearch:ptp-backend-elasticsearch-1

  # 2024-4-20  10:39-安装minio
  minio:
    container_name: ptp-backend-minio-1
    labels:
      name: ptp-backend-minio-1
      author: LiGuanda
      description: "用于对用户提交上云的媒体数据提供对象存储服务(OSS)"
    image: minio/minio:${MINIO_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-minio-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${MINIO_LOCALHOST}
    ports:
      - "9000:9000"
      - "9001:9001"
    expose:
      - 9000
      - 9001
    volumes:
      - ./volumes/minio/config/:/etc/minio/:rw
      - ./volumes/minio/data:/data:rw
    environment:
      MINIO_CONFIG_ENV_FILE: /etc/minio/config.env
      MINIO_ACCESS_KEY: ptp_minio_access_key
      MINIO_SECRET_KEY: ptp_minio_secret_key
    command: minio server --console-address ":9001"
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64

  # 2024-4-26  20:45-安装kes
  #  kes:
  #    container_name: ptp-backend-kes-1
  #    labels:
  #      name: ptp-backend-kes-1
  #      author: LiGuanda
  #      description: "用于对用户提交上云的媒体数据提供安全服务保证"
  #    image: minio/kes:${KES_VERSION}
  #    env_file:
  #      - .env
  #    dns: 8.8.8.8
  #    hostname: ptp-backend-kes-1
  #    extra_hosts:
  #      - exthost:${EXTERNAL_LOCALHOST}
  #    networks:
  #      ptp-network:
  #        ipv4_address: ${KES_LOCALHOST}
  #    ports:
  #      - "7373:7373"
  #    expose:
  #      - 7373
  #      # environment:
  #      # KES_SERVER: http://${KES_LOCALHOST}:7373
  #      # KES_API_KEY: kes:v1:AD9E7FSYWrMD+VjhI6q545cYT9YOyFxZb7UnjEepYDRc
  #    restart: on-failure
  #    logging:
  #      driver: json-file
  #      options:
  #        max-size: 256k
  #        max-file: 64

  # 2024-4-27  18:32-安装nacos
  nacos:
    container_name: ptp-backend-nacos-1
    labels:
      name: ptp-backend-nacos-1
      author: LiGuanda
      description: "用于对服务提供者和服务消费者提供服务发现和动态配置功能"
    image: nacos/nacos-server:${NACOS_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-nacos-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${NACOS_LOCALHOST}
    ports:
      - "8848:8848"
      - "9848:9848"
    expose:
      - 8848
      - 9848
    volumes:
      - "./volumes/nacos/standalone-logs/:/home/nacos/logs:rw"
    environment:
      PREFER_HOST_MODE: hostname # 2024-4-27  18:41-支持IP还是域名模式
      MODE: standalone # 2024-4-27  18:42-系统启动方式: 集群/单机
      NACOS_AUTH_IDENTITY_KEY: ptp-backend-nacos-auth-key
      NACOS_AUTH_IDENTITY_VALUE: ptp-backend-nacos-auth-value
      NACOS_AUTH_TOKEN: ptp-backend-nacos-auth-token
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64


  # 2024-5-29  20:38-安装RocketMQ-NameServer
  rocketmq-nameserver:
    container_name: ptp-backend-rocketmq-nameserver-1
    labels:
      name: ptp-backend-rocketmq-nameserver-1
      author: LiGuanda
      description: "用于给RocketMQ的Broker提供服务发现与注册功能"
    image: apache/rocketmq:${ROCKETMQ_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-rocketmq-nameserver-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${ROCKETMQ_NAMESERVER_LOCALHOST}
    ports:
      - "9876:9876"
    expose:
      - 9876
    volumes:
      - "./volumes/rocketmq/logs:/home/rocketmq/logs:rw"
      - "./volumes/rocketmq/conf/broker.conf:/home/rocketmq/rocketmq-5.2.0/conf/broker.conf:rw"
    command: sh mqnamesrv
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64


  # 2024-5-29  21:43-安装RocketMQ-Broker
  rocketmq-broker:
    container_name: ptp-backend-rocketmq-broker-1
    labels:
      name: ptp-backend-rocketmq-broker-1
      author: LiGuanda
      description: "用于真正提供消息收发功能"
    image: apache/rocketmq:${ROCKETMQ_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-rocketmq-broker-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${ROCKETMQ_BROKER_LOCALHOST}
    ports:
      - "10909:10909"
      - "10911:10911"
    expose:
      - 10909
      - 10911
    volumes:
      - "./volumes/rocketmq/logs:/home/rocketmq/logs:rw"
      - "./volumes/rocketmq/conf/broker.conf:/home/rocketmq/rocketmq-5.2.0/conf/broker.conf:rw"
    command: sh mqbroker -n ${EXTERNAL_LOCALHOST}:9876 -c /home/rocketmq/rocketmq-5.2.0/conf/broker.conf
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - rocketmq-nameserver


  # 2024-5-29  21:43-安装RocketMQ-Dashboard
  rocketmq-dashboard:
    container_name: ptp-backend-rocketmq-dashboard-1
    labels:
      name: ptp-backend-rocketmq-dashboard-1
      author: LiGuanda
      description: "用于监控RocketMQ的各种事件、性能的统计信息"
    image: apacherocketmq/rocketmq-dashboard:${ROCKETMQ_DASHBOARD_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-rocketmq-dashboard-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${ROCKETMQ_DASHBOARD_LOCALHOST}
    ports:
      - "8280:8080"
    expose:
      - 8080
    environment:
      JAVA_OPTS: "-Drocketmq.namesrv.addr=${EXTERNAL_LOCALHOST}:9876"
    command: sh rocketmq-dashboard
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64
    depends_on:
      - rocketmq-nameserver
      - rocketmq-broker


  # 2024-6-13  23:50-安装logstash
  logstash:
    container_name: ptp-backend-logstash-1
    labels:
      name: ptp-backend-logstash-1
      author: LiGuanda
      description: "用于从多个数据源采集数据然后转换数据并发送至数据库中"
    image: logstash:${LOGSTASH_VERSION}
    env_file:
      - .env
    dns: 8.8.8.8
    hostname: ptp-backend-logstash-1
    extra_hosts:
      - exthost:${EXTERNAL_LOCALHOST}
    networks:
      ptp-network:
        ipv4_address: ${LOGSTASH_LOCALHOST}
    ports:
      - "5043:5043"
      - "5044:5044"
      - "9600:9600"
    expose:
      - 5043
      - 5044
      - 9600
    volumes:
      - "./volumes/logstash/config:/usr/share/logstash/config:rw"
      - "./volumes/logstash/pipeline:/usr/share/logstash/pipeline:rw"
      - "./volumes/logstash/docker-entrypoint:/usr/local/bin/docker-entrypoint:rw"
    # 2024-6-14  23:42-安装json_lines所需的插件
    # command: /usr/share/logstash/bin/logstash-plugin install logstash-codec-json_lines && /bin/bash
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 256k
        max-file: 64


# 2024-4-10  15:28-新建一个自定义网络，将全部容器部署到同一个网络内，使其之间能够相互连通
networks:
  ptp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.250.250.0/24